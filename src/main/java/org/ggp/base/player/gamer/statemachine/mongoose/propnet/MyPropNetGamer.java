package org.ggp.base.player.gamer.statemachine.mongoose.propnet;

import org.ggp.base.player.gamer.Gamer;
import org.ggp.base.player.gamer.exception.AbortingException;
import org.ggp.base.player.gamer.exception.MetaGamingException;
import org.ggp.base.player.gamer.exception.MoveSelectionException;
import org.ggp.base.player.gamer.exception.StoppingException;
import org.ggp.base.util.gdl.grammar.GdlTerm;
import org.ggp.base.util.logging.GamerLogger;
import org.ggp.base.util.statemachine.Move;
import org.ggp.base.util.statemachine.Role;
import org.ggp.base.util.statemachine.exceptions.GoalDefinitionException;
import org.ggp.base.util.statemachine.exceptions.MoveDefinitionException;
import org.ggp.base.util.statemachine.exceptions.TransitionDefinitionException;

import java.util.ArrayList;
import java.util.List;

public abstract class MyPropNetGamer extends Gamer {
    // =====================================================================
    // First, the abstract methods which need to be overriden by subclasses.
    // These determine what state machine is used, what the gamer does during
    // metagaming, and how the gamer selects moves.

    /**
     * Defines which state machine this gamer will use.
     * @return
     */
    public abstract PropNet getInitialPropNet();

    /**
     * Defines the metagaming action taken by a player during the START_CLOCK
     * @param timeout time in milliseconds since the era when this function must return
     * @throws TransitionDefinitionException
     * @throws MoveDefinitionException
     * @throws GoalDefinitionException
     */
    public abstract void propNetMetaGame(long timeout) throws TransitionDefinitionException, MoveDefinitionException, GoalDefinitionException;

    /**
     * Defines the algorithm that the player uses to select their move.
     * @param timeout time in milliseconds since the era when this function must return
     * @return Move - the move selected by the player
     * @throws TransitionDefinitionException
     * @throws MoveDefinitionException
     * @throws GoalDefinitionException
     */
    public abstract Move propNetSelectMove(long timeout) throws TransitionDefinitionException, MoveDefinitionException, GoalDefinitionException;

    /**
     * Defines any actions that the player takes upon the game cleanly ending.
     */
    public abstract void propNetStop();

    /**
     * Defines any actions that the player takes upon the game abruptly ending.
     */
    public abstract void propNetAbort();

    // =====================================================================
    // Next, methods which can be used by subclasses to get information about
    // the current state of the game, and tweak the state machine on the fly.

    /**
     * Returns the current state of the game.
     */
    public final StatePropNet getCurrentState()
    {
        return currentState;
    }

    /**
     * Returns the role that this gamer is playing as in the game.
     */
    public final Role getRole()
    {
        return role;
    }

    /**
     * Returns the state machine.  This is used for calculating the next state and other operations, such as computing
     * the legal moves for all players, whether states are terminal, and the goal values of terminal states.
     */
    public final PropNet getPropNet()
    {
        return propNet;
    }

    /**
     * Cleans up the role, currentState and propNet. This should only be
     * used when a match is over, and even then only when you really need to
     * free up resources that the state machine has tied up. Currently, it is
     * only used in the Proxy, for players designed to run 24/7.
     */
    protected final void cleanupAfterMatch() {
        role = null;
        currentState = null;
        propNet = null;
        setMatch(null);
        setRoleName(null);
    }

        /**
     * Switches propNet to newPropNet, playing through the match
     * history to the current state so that currentState is expressed using
     * a MachineState generated by the new state machine.
     *
     * This is not done in a thread-safe fashion with respect to the rest of
     * the gamer, so be careful when using this method.
     *
     * @param newPropNet the new state machine
     */
    protected final void switchPropNet(PropNet newPropNet) {
        try {
            StatePropNet newCurrentState = newPropNet.getInitialState();
            Role newRole = newPropNet.getRoleFromConstant(getRoleName());

            // Attempt to run through the game history in the new machine
            List<List<GdlTerm>> theMoveHistory = getMatch().getMoveHistory();
            for(List<GdlTerm> nextMove : theMoveHistory) {
                List<Move> theJointMove = new ArrayList<Move>();
                for(GdlTerm theSentence : nextMove)
                    theJointMove.add(newPropNet.getMoveFromTerm(theSentence));
                newCurrentState = newPropNet.getNextStateDestructively(newCurrentState, theJointMove);
            }

            // Finally, switch over if everything went well.
            role = newRole;
            currentState = newCurrentState;
            propNet = newPropNet;
        } catch (Exception e) {
            GamerLogger.log("GamePlayer", "Caught an exception while switching state machine!");
            GamerLogger.logStackTrace("GamePlayer", e);
        }
    }

    /**
     * A function that can be used when deserializing gamers, to bring a
     * state machine gamer back to the internal state that it has when it
     * arrives at a particular game state.
     */
    public final void resetStateFromMatch() {
        propNet = getInitialPropNet();
        propNet.initialize(getMatch().getGame().getRules());
        currentState = propNet.getPropNetFromSentenceList(getMatch().getMostRecentState());
        role = propNet.getRoleFromConstant(getRoleName());
    }

    // =====================================================================
    // Finally, methods which are overridden with proper state-machine-based
    // semantics. These basically wrap a state-machine-based view of the world
    // around the ordinary metaGame() and selectMove() functions, calling the
    // new stateMachineMetaGame() and stateMachineSelectMove() functions after
    // doing the state-machine-related book-keeping.

    /**
     * A wrapper function for stateMachineMetaGame. When the match begins, this
     * initializes the state machine and role using the match description, and
     * then calls stateMachineMetaGame.
     */
    @Override
    public final void metaGame(long timeout) throws MetaGamingException
    {
        try
        {
            propNet = getInitialPropNet();
            propNet.initialize(getMatch().getGame().getRules());
            currentState = propNet.getInitialState();
            role = propNet.getRoleFromConstant(getRoleName());
            getMatch().appendState(currentState.getContents());

            propNetMetaGame(timeout);
        }
        catch (Exception e)
        {
            GamerLogger.logStackTrace("GamePlayer", e);
            throw new MetaGamingException(e);
        }
    }

    /**
     * A wrapper function for stateMachineSelectMove. When we are asked to
     * select a move, this advances the state machine up to the current state
     * and then calls stateMachineSelectMove to select a move based on that
     * current state.
     */
    @Override
    public final GdlTerm selectMove(long timeout) throws MoveSelectionException
    {
        try
        {
            propNet.doPerMoveWork();

            List<GdlTerm> lastMoves = getMatch().getMostRecentMoves();
            if (lastMoves != null)
            {
                List<Move> moves = new ArrayList<Move>();
                for (GdlTerm sentence : lastMoves)
                {
                    moves.add(propNet.getMoveFromTerm(sentence));
                }

                currentState = propNet.getNextState(currentState, moves);
                getMatch().appendState(currentState.getContents());
            }

            return propNetSelectMove(timeout).getContents();
        }
        catch (Exception e)
        {
            GamerLogger.logStackTrace("GamePlayer", e);
            throw new MoveSelectionException(e);
        }
    }

    @Override
    public void stop() throws StoppingException {
        try {
            propNet.doPerMoveWork();

            List<GdlTerm> lastMoves = getMatch().getMostRecentMoves();
            if (lastMoves != null)
            {
                List<Move> moves = new ArrayList<Move>();
                for (GdlTerm sentence : lastMoves)
                {
                    moves.add(propNet.getMoveFromTerm(sentence));
                }

                currentState = propNet.getNextState(currentState, moves);
                getMatch().appendState(currentState.getContents());
                getMatch().markCompleted(propNet.getGoalsList(currentState));
            }

            propNetStop();
        }
        catch (Exception e)
        {
            GamerLogger.logStackTrace("GamePlayer", e);
            throw new StoppingException(e);
        }
    }

    @Override
    public void abort() throws AbortingException {
        try {
            propNetAbort();
        }
        catch (Exception e)
        {
            GamerLogger.logStackTrace("GamePlayer", e);
            throw new AbortingException(e);
        }
    }

    // Internal state about the current state of the state machine.
    private Role role;
    private StatePropNet currentState;
    private PropNet propNet;
}
